{"ast":null,"code":"/**\n * This file contains some function stubs(ie incomplete functions) that\n * you MUST use to begin the work for calculating the grades.\n *\n * You may need more functions than are currently here...we highly encourage you to define more.\n *\n * Anything that has a type of \"undefined\" you will need to replace with something.\n */\n\nimport { GET_DEFAULT_HEADERS, BASE_API_URL, MY_BU_ID } from \"../globals\";\n\n// const [classList, setClassList] = useState<IClassAssignments[]>([]);\n/**\n * This function might help you write the function below.\n * It retrieves the final grade for a single student based on the passed params.\n * \n * If you are reading here and you haven't read the top of the file...go back.\n */\nexport async function calculateStudentFinalGrade(studentID, classAssignments, klass) {\n  return undefined;\n}\nasync function grabAssignmentWeight(classID) {\n  if (classID === \"\") {\n    const throwaway = [];\n    return throwaway;\n  }\n  const res = await fetch(`${BASE_API_URL}/class/listAssignments/${classID}?buid=${MY_BU_ID}`, {\n    method: \"GET\",\n    headers: GET_DEFAULT_HEADERS()\n  });\n  const json = await res.json();\n  return json;\n}\nasync function grabStudentsID(classID) {\n  if (classID === \"\") {\n    const throwaway = [];\n    return throwaway;\n  }\n  const res = await fetch(`${BASE_API_URL}/class/listStudents/${classID}?buid=${MY_BU_ID}`, {\n    method: \"GET\",\n    headers: GET_DEFAULT_HEADERS()\n  });\n  const json = await res.json();\n  return json;\n}\nasync function grabStudentsData(studentIDArr) {\n  if (studentIDArr.length === 0) {\n    const throwaway = [];\n    return throwaway;\n  }\n  const promises = studentIDArr.map(async function (sid) {\n    const res = await fetch(`${BASE_API_URL}/student/GetById/${sid}?buid=${MY_BU_ID}`, {\n      method: \"GET\",\n      headers: GET_DEFAULT_HEADERS()\n    });\n    const json = await res.json();\n    return json[0];\n  });\n  const arr = await Promise.all(promises);\n  return arr;\n}\nasync function grabStudentsGrade(classID, studentIDArr) {\n  if (studentIDArr.length === 0) {\n    const throwaway = [];\n    return throwaway;\n  }\n  const promises = studentIDArr.map(async function (sid) {\n    const res = await fetch(`${BASE_API_URL}/student/listGrades/${sid.universityId}/${classID}?buid=${MY_BU_ID}`, {\n      method: \"GET\",\n      headers: GET_DEFAULT_HEADERS()\n    });\n    const json = await res.json();\n    return json;\n  });\n  const arr = await Promise.all(promises);\n  return arr;\n}\n\n/**\n * You need to write this function! You might want to write more functions to make the code easier to read as well.\n * \n *  If you are reading here and you haven't read the top of the file...go back.\n * \n * @param classID The ID of the class for which we want to calculate the final grades\n * @returns Some data structure that has a list of each student and their final grade.\n */\nexport async function calcAllFinalGrade(classID) {\n  let assignmentWeightArr = await grabAssignmentWeight(classID);\n  let studentIDArr = await grabStudentsID(classID);\n  let studentDataArr = await grabStudentsData(studentIDArr);\n  let gradesPerStudentArr = await grabStudentsGrade(classID, studentDataArr);\n  console.log(assignmentWeightArr);\n  console.log(studentIDArr);\n  console.log(studentDataArr);\n  console.log(gradesPerStudentArr);\n  return undefined;\n}","map":{"version":3,"names":["GET_DEFAULT_HEADERS","BASE_API_URL","MY_BU_ID","calculateStudentFinalGrade","studentID","classAssignments","klass","undefined","grabAssignmentWeight","classID","throwaway","res","fetch","method","headers","json","grabStudentsID","grabStudentsData","studentIDArr","length","promises","map","sid","arr","Promise","all","grabStudentsGrade","universityId","calcAllFinalGrade","assignmentWeightArr","studentDataArr","gradesPerStudentArr","console","log"],"sources":["/Users/simonkye/Documents/Spark/spark-fall-2023-software-engineering-assessment-KKeySimon/src/utils/calculate_grade.ts"],"sourcesContent":["/**\n * This file contains some function stubs(ie incomplete functions) that\n * you MUST use to begin the work for calculating the grades.\n *\n * You may need more functions than are currently here...we highly encourage you to define more.\n *\n * Anything that has a type of \"undefined\" you will need to replace with something.\n */\nimport { IUniversityClass, IClassAssignments, IUniversityStudent, IStudentGrades } from \"../types/api_types\";\nimport { GET_DEFAULT_HEADERS, BASE_API_URL, MY_BU_ID } from \"../globals\";\n\n// const [classList, setClassList] = useState<IClassAssignments[]>([]);\n/**\n * This function might help you write the function below.\n * It retrieves the final grade for a single student based on the passed params.\n * \n * If you are reading here and you haven't read the top of the file...go back.\n */\nexport async function calculateStudentFinalGrade(\n  studentID: string,\n  classAssignments: undefined,\n  klass: IUniversityClass\n): Promise<undefined> {\n  return undefined;\n}\n\nasync function grabAssignmentWeight(classID: string): Promise<IClassAssignments[]> {\n  if (classID === \"\") {\n    const throwaway : IClassAssignments[] = []\n    return throwaway;\n  }\n  const res = await fetch(`${BASE_API_URL}/class/listAssignments/${classID}?buid=${MY_BU_ID}`, {\n    method: \"GET\",\n    headers: GET_DEFAULT_HEADERS(),\n  });\n  const json = await res.json();\n  return json;\n}\n\nasync function grabStudentsID(classID: string): Promise<string[]> {\n  if (classID === \"\") {\n    const throwaway : string[] = []\n    return throwaway;\n  }\n  const res = await fetch(`${BASE_API_URL}/class/listStudents/${classID}?buid=${MY_BU_ID}`, {\n    method: \"GET\",\n    headers: GET_DEFAULT_HEADERS(),\n  });\n  const json = await res.json();\n  return json;\n}\n\nasync function grabStudentsData(studentIDArr: string[]): Promise<IUniversityStudent[]> {\n  if (studentIDArr.length === 0) {\n    const throwaway : IUniversityStudent[] = []\n    return throwaway;\n  }\n\n  const promises = studentIDArr.map(async function (sid) {\n    const res = await fetch(`${BASE_API_URL}/student/GetById/${sid}?buid=${MY_BU_ID}`, {\n      method: \"GET\",\n      headers: GET_DEFAULT_HEADERS(),\n    });\n    const json = await res.json();\n    return json[0]\n  })\n  const arr = await Promise.all(promises)\n  return arr;\n}\n\nasync function grabStudentsGrade(classID : string, studentIDArr: IUniversityStudent[]): Promise<IStudentGrades[]> {\n  if (studentIDArr.length === 0) {\n    const throwaway : IStudentGrades[] = []\n    return throwaway;\n  }\n\n  const promises = studentIDArr.map(async function (sid) {\n    const res = await fetch(`${BASE_API_URL}/student/listGrades/${sid.universityId}/${classID}?buid=${MY_BU_ID}`, {\n      method: \"GET\",\n      headers: GET_DEFAULT_HEADERS(),\n    });\n    const json = await res.json();\n    return json\n  })\n  const arr = await Promise.all(promises)\n  return arr;\n}\n\n/**\n * You need to write this function! You might want to write more functions to make the code easier to read as well.\n * \n *  If you are reading here and you haven't read the top of the file...go back.\n * \n * @param classID The ID of the class for which we want to calculate the final grades\n * @returns Some data structure that has a list of each student and their final grade.\n */\nexport async function calcAllFinalGrade(classID: string): Promise<undefined> {\n  let assignmentWeightArr = await grabAssignmentWeight(classID);\n  let studentIDArr = await grabStudentsID(classID);\n  let studentDataArr = await grabStudentsData(studentIDArr);\n  let gradesPerStudentArr = await grabStudentsGrade(classID, studentDataArr);\n  console.log(assignmentWeightArr)\n  console.log(studentIDArr)\n  console.log(studentDataArr)\n  console.log(gradesPerStudentArr)\n  return undefined;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}