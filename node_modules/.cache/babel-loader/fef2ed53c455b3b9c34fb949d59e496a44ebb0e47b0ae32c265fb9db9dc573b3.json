{"ast":null,"code":"/**\n * This file contains some function stubs(ie incomplete functions) that\n * you MUST use to begin the work for calculating the grades.\n *\n * You may need more functions than are currently here...we highly encourage you to define more.\n *\n * Anything that has a type of \"undefined\" you will need to replace with something.\n */\n\nimport { GET_DEFAULT_HEADERS, BASE_API_URL, MY_BU_ID } from \"../globals\";\n\n// const [classList, setClassList] = useState<IClassAssignments[]>([]);\n/**\n * This function might help you write the function below.\n * It retrieves the final grade for a single student based on the passed params.\n * \n * If you are reading here and you haven't read the top of the file...go back.\n */\nexport async function calculateStudentFinalGrade(studentID, classAssignments, klass) {\n  return undefined;\n}\nasync function grabAssignmentWeight(classID) {\n  if (classID === \"\") {\n    const throwaway = [{\n      assignmentId: \"\",\n      classId: \"\",\n      date: \"\",\n      weight: 0\n    }];\n    return throwaway;\n  }\n  const res = await fetch(`${BASE_API_URL}/class/listAssignments/${classID}?buid=${MY_BU_ID}`, {\n    method: \"GET\",\n    headers: GET_DEFAULT_HEADERS()\n  });\n  const json = await res.json();\n  console.log(json);\n  return json;\n}\nasync function grabStudentsID(classID) {\n  if (classID === \"\") {\n    const throwaway = [];\n    return throwaway;\n  }\n  const res = await fetch(`${BASE_API_URL}/class/listStudents/${classID}?buid=${MY_BU_ID}`, {\n    method: \"GET\",\n    headers: GET_DEFAULT_HEADERS()\n  });\n  const json = await res.json();\n  console.log(json);\n  return json;\n}\nasync function grabStudentsData(studentIDArr) {\n  if (studentIDArr === \"\") {\n    const throwaway = [\"\"];\n    return throwaway;\n  }\n  studentIDArr.forEach(async function (sid) {\n    const res = await fetch(`${BASE_API_URL}/student/GetById/${sid}?buid=${MY_BU_ID}`, {\n      method: \"GET\",\n      headers: GET_DEFAULT_HEADERS()\n    });\n    const json = await res.json();\n    console.log(json);\n  });\n  return [];\n}\n\n/**\n * You need to write this function! You might want to write more functions to make the code easier to read as well.\n * \n *  If you are reading here and you haven't read the top of the file...go back.\n * \n * @param classID The ID of the class for which we want to calculate the final grades\n * @returns Some data structure that has a list of each student and their final grade.\n */\nexport async function calcAllFinalGrade(classID) {\n  let assignmentWeightArr = await grabAssignmentWeight(classID);\n  let studentIDArr = await grabStudentsID(classID);\n  let studentDataArr = await grabStudentsData(studentIDArr);\n  return undefined;\n}","map":{"version":3,"names":["GET_DEFAULT_HEADERS","BASE_API_URL","MY_BU_ID","calculateStudentFinalGrade","studentID","classAssignments","klass","undefined","grabAssignmentWeight","classID","throwaway","assignmentId","classId","date","weight","res","fetch","method","headers","json","console","log","grabStudentsID","grabStudentsData","studentIDArr","forEach","sid","calcAllFinalGrade","assignmentWeightArr","studentDataArr"],"sources":["/Users/simonkye/Documents/Spark/spark-fall-2023-software-engineering-assessment-KKeySimon/src/utils/calculate_grade.ts"],"sourcesContent":["/**\n * This file contains some function stubs(ie incomplete functions) that\n * you MUST use to begin the work for calculating the grades.\n *\n * You may need more functions than are currently here...we highly encourage you to define more.\n *\n * Anything that has a type of \"undefined\" you will need to replace with something.\n */\nimport { IUniversityClass, IClassAssignments } from \"../types/api_types\";\nimport { GET_DEFAULT_HEADERS, BASE_API_URL, MY_BU_ID } from \"../globals\";\n\n// const [classList, setClassList] = useState<IClassAssignments[]>([]);\n/**\n * This function might help you write the function below.\n * It retrieves the final grade for a single student based on the passed params.\n * \n * If you are reading here and you haven't read the top of the file...go back.\n */\nexport async function calculateStudentFinalGrade(\n  studentID: string,\n  classAssignments: undefined,\n  klass: IUniversityClass\n): Promise<undefined> {\n  return undefined;\n}\n\nasync function grabAssignmentWeight(classID: string): Promise<IClassAssignments[]> {\n  if (classID === \"\") {\n    const throwaway : IClassAssignments[] = [{\n      assignmentId: \"\",\n      classId: \"\",\n      date: \"\",\n      weight: 0,\n    }]\n    return throwaway;\n  }\n  const res = await fetch(`${BASE_API_URL}/class/listAssignments/${classID}?buid=${MY_BU_ID}`, {\n    method: \"GET\",\n    headers: GET_DEFAULT_HEADERS(),\n  });\n  const json = await res.json();\n  console.log(json);\n  return json;\n}\n\nasync function grabStudentsID(classID: string): Promise<string[]> {\n  if (classID === \"\") {\n    const throwaway : string[] = []\n    return throwaway;\n  }\n  const res = await fetch(`${BASE_API_URL}/class/listStudents/${classID}?buid=${MY_BU_ID}`, {\n    method: \"GET\",\n    headers: GET_DEFAULT_HEADERS(),\n  });\n  const json = await res.json();\n  console.log(json);\n  return json;\n}\n\nasync function grabStudentsData(studentIDArr: string[]): Promise<string[]> {\n  if (studentIDArr === \"\") {\n    const throwaway : string[] = [\"\"]\n    return throwaway;\n  }\n  studentIDArr.forEach(async function (sid) {\n    const res = await fetch(`${BASE_API_URL}/student/GetById/${sid}?buid=${MY_BU_ID}`, {\n      method: \"GET\",\n      headers: GET_DEFAULT_HEADERS(),\n    });\n    const json = await res.json();\n    console.log(json)\n  })\n  return [];\n}\n\n/**\n * You need to write this function! You might want to write more functions to make the code easier to read as well.\n * \n *  If you are reading here and you haven't read the top of the file...go back.\n * \n * @param classID The ID of the class for which we want to calculate the final grades\n * @returns Some data structure that has a list of each student and their final grade.\n */\nexport async function calcAllFinalGrade(classID: string): Promise<undefined> {\n  let assignmentWeightArr = await grabAssignmentWeight(classID);\n  let studentIDArr = await grabStudentsID(classID);\n  let studentDataArr = await grabStudentsData(studentIDArr);\n  return undefined;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,mBAAmB,EAAEC,YAAY,EAAEC,QAAQ,QAAQ,YAAY;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,0BAA0B,CAC9CC,SAAiB,EACjBC,gBAA2B,EAC3BC,KAAuB,EACH;EACpB,OAAOC,SAAS;AAClB;AAEA,eAAeC,oBAAoB,CAACC,OAAe,EAAgC;EACjF,IAAIA,OAAO,KAAK,EAAE,EAAE;IAClB,MAAMC,SAA+B,GAAG,CAAC;MACvCC,YAAY,EAAE,EAAE;MAChBC,OAAO,EAAE,EAAE;MACXC,IAAI,EAAE,EAAE;MACRC,MAAM,EAAE;IACV,CAAC,CAAC;IACF,OAAOJ,SAAS;EAClB;EACA,MAAMK,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEf,YAAa,0BAAyBQ,OAAQ,SAAQP,QAAS,EAAC,EAAE;IAC3Fe,MAAM,EAAE,KAAK;IACbC,OAAO,EAAElB,mBAAmB;EAC9B,CAAC,CAAC;EACF,MAAMmB,IAAI,GAAG,MAAMJ,GAAG,CAACI,IAAI,EAAE;EAC7BC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EACjB,OAAOA,IAAI;AACb;AAEA,eAAeG,cAAc,CAACb,OAAe,EAAqB;EAChE,IAAIA,OAAO,KAAK,EAAE,EAAE;IAClB,MAAMC,SAAoB,GAAG,EAAE;IAC/B,OAAOA,SAAS;EAClB;EACA,MAAMK,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEf,YAAa,uBAAsBQ,OAAQ,SAAQP,QAAS,EAAC,EAAE;IACxFe,MAAM,EAAE,KAAK;IACbC,OAAO,EAAElB,mBAAmB;EAC9B,CAAC,CAAC;EACF,MAAMmB,IAAI,GAAG,MAAMJ,GAAG,CAACI,IAAI,EAAE;EAC7BC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EACjB,OAAOA,IAAI;AACb;AAEA,eAAeI,gBAAgB,CAACC,YAAsB,EAAqB;EACzE,IAAIA,YAAY,KAAK,EAAE,EAAE;IACvB,MAAMd,SAAoB,GAAG,CAAC,EAAE,CAAC;IACjC,OAAOA,SAAS;EAClB;EACAc,YAAY,CAACC,OAAO,CAAC,gBAAgBC,GAAG,EAAE;IACxC,MAAMX,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEf,YAAa,oBAAmByB,GAAI,SAAQxB,QAAS,EAAC,EAAE;MACjFe,MAAM,EAAE,KAAK;MACbC,OAAO,EAAElB,mBAAmB;IAC9B,CAAC,CAAC;IACF,MAAMmB,IAAI,GAAG,MAAMJ,GAAG,CAACI,IAAI,EAAE;IAC7BC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EACnB,CAAC,CAAC;EACF,OAAO,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeQ,iBAAiB,CAAClB,OAAe,EAAsB;EAC3E,IAAImB,mBAAmB,GAAG,MAAMpB,oBAAoB,CAACC,OAAO,CAAC;EAC7D,IAAIe,YAAY,GAAG,MAAMF,cAAc,CAACb,OAAO,CAAC;EAChD,IAAIoB,cAAc,GAAG,MAAMN,gBAAgB,CAACC,YAAY,CAAC;EACzD,OAAOjB,SAAS;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}